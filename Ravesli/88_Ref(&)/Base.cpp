#include <iostream>

    /* Ссылка — это тип переменной в языке C++, который работает как псевдоним другого объекта или значения.
	* Ссылка — это тот же указатель, который неявно разыменовывается при доступе к значению, на которое он указывает («под капотом» ссылки реализованы с помощью указателей).
	*/

// ref - это ссылка на переданный аргумент, а не копия аргумента
void changeN(int &ref)
{
	ref = 8;
}

int main() 
{   
    {
		int value = 7; // обычная переменная
		int &ref = value; // ссылка на переменную value

		value = 8; // value теперь 8
		ref = 9; // value теперь 9

		std::cout << ref << std::endl; // выведется 9
		++ref;
		std::cout << value << std::endl; // выведется 10

		std::cout << &value; // выведется 0035FE58
		std::cout << &ref; // выведется 0035FE58

	//	int &invalidRef; // некорректная ссылка: ссылка должна ссылаться на что-либо
    }
	{
		int a = 7;
		int &ref1 = a; // ок: a - это неконстантное l-value

		const int b = 8;
	//	int &ref2 = b; // не ок: b - это константное l-value

	//	int &ref3 = 4; // не ок: 4 - это r-value
	}
	{		// После инициализации изменить объект, на который указывает ссылка — нельзя
		int value1 = 7;
		int value2 = 8;

		int &ref = value1; // ок: ref - теперь псевдоним для value1
		ref = value2; // присваиваем 8 (значение переменной value2) переменной value1. Здесь НЕ изменяется объект, на который ссылается ссылка!!
		std::cout << value1 << std::endl; // выведется 8 
	}
	{		// Передача в ссылки в функцию
		int x = 7;
		std::cout << x << '\n'; // выведется 7
		changeN(x); // обратите внимание, этот аргумент не обязательно должен быть ссылкой
		std::cout << x << '\n'; // выведется 8
	}
	{		// ссылка как псевдоним переменной
		struct Something
		{
			int value1;
			float value2;
		};

		struct Other
		{
			Something something;
			int otherValue;
		};

		Other other;

		int &ref = other.something.value1; // ref теперь может использоваться вместо other.something.value1
	}
	{
		int value = 7;
		int *const ptr = &value; // одно и тоже
		int &ref = value;		 // одно и тоже

		*ptr = 7;	// одно и тоже
		ref = 7;	// одно и тоже
	}
	/*
	* Если определенное задание может быть решено с помощью как ссылок, так и указателей, то лучше использовать ссылки.
	* Указатели следует использовать только в тех ситуациях, когда ссылки являются недостаточно эффективными 
	*	(например, при динамическом выделении памяти).
	*/
    return 0;
}
